// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FactorialClient is the client API for Factorial service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FactorialClient interface {
	// Calculate should be make async actions result should be returned asap
	Calculate(ctx context.Context, in *CalculateRequest, opts ...grpc.CallOption) (Factorial_CalculateClient, error)
}

type factorialClient struct {
	cc grpc.ClientConnInterface
}

func NewFactorialClient(cc grpc.ClientConnInterface) FactorialClient {
	return &factorialClient{cc}
}

func (c *factorialClient) Calculate(ctx context.Context, in *CalculateRequest, opts ...grpc.CallOption) (Factorial_CalculateClient, error) {
	stream, err := c.cc.NewStream(ctx, &Factorial_ServiceDesc.Streams[0], "/proto.Factorial/Calculate", opts...)
	if err != nil {
		return nil, err
	}
	x := &factorialCalculateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Factorial_CalculateClient interface {
	Recv() (*CalculateResult, error)
	grpc.ClientStream
}

type factorialCalculateClient struct {
	grpc.ClientStream
}

func (x *factorialCalculateClient) Recv() (*CalculateResult, error) {
	m := new(CalculateResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FactorialServer is the server API for Factorial service.
// All implementations must embed UnimplementedFactorialServer
// for forward compatibility
type FactorialServer interface {
	// Calculate should be make async actions result should be returned asap
	Calculate(*CalculateRequest, Factorial_CalculateServer) error
	mustEmbedUnimplementedFactorialServer()
}

// UnimplementedFactorialServer must be embedded to have forward compatible implementations.
type UnimplementedFactorialServer struct {
}

func (UnimplementedFactorialServer) Calculate(*CalculateRequest, Factorial_CalculateServer) error {
	return status.Errorf(codes.Unimplemented, "method Calculate not implemented")
}
func (UnimplementedFactorialServer) mustEmbedUnimplementedFactorialServer() {}

// UnsafeFactorialServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FactorialServer will
// result in compilation errors.
type UnsafeFactorialServer interface {
	mustEmbedUnimplementedFactorialServer()
}

func RegisterFactorialServer(s grpc.ServiceRegistrar, srv FactorialServer) {
	s.RegisterService(&Factorial_ServiceDesc, srv)
}

func _Factorial_Calculate_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CalculateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FactorialServer).Calculate(m, &factorialCalculateServer{stream})
}

type Factorial_CalculateServer interface {
	Send(*CalculateResult) error
	grpc.ServerStream
}

type factorialCalculateServer struct {
	grpc.ServerStream
}

func (x *factorialCalculateServer) Send(m *CalculateResult) error {
	return x.ServerStream.SendMsg(m)
}

// Factorial_ServiceDesc is the grpc.ServiceDesc for Factorial service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Factorial_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Factorial",
	HandlerType: (*FactorialServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Calculate",
			Handler:       _Factorial_Calculate_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "factorial.proto",
}
